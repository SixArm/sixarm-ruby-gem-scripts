#!/bin/sh
#
# gempub: gem publishing from your pwd to railapp.com
#
# This is suitable for this kind of approach:
#   /foo/bar/my_gem/
#     my_gem.gemspec  # your gemspec file
#     doc/  # for rdoc files; will be erased and regenerated
#     lib/myproject/  # for your class files
#     lib/myproject.rb  # loads your class files
#     test/ # for your test files
#
# ==Example
#   cd ~/foo/bar/my_gem_dir
#   gempub
#   => removes all version of this gem, e.g. rm my_gem-1.2.3.gem
#   => removes temp files, e.g. files ending in tilde
#   => builds the gem
#   => rdoc with custom template
#   => git add, commit, push
#   => copy to railapp.com then remote gem generate
##

# Paths
gem='/usr/bin/env gem'
ruby='/usr/bin/env ruby'

# Where are we running?
pwd=`pwd`
basename=`basename $pwd`
gem_name=`gem-name`
echo gem name: $gem_name

# rdoc template path 
# see /usr/local/lib/ruby/gems/1.9.1/gems/rdoc-2.4.2/lib/rdoc/generator/sixarm.rb
# seee /usr/local/lib/ruby/1.9.1/rdoc/generator/html/sixarm.rb
rdoc_template=sixarm

msg=$1

#### LOCAL BUILD

# Remove all versions of this gem
rm -f *.gem
rm -f *.sha512.txt

# Remove all old temp files
find . | grep ".*~" | xargs rm -f "*~"

# Remove any existing rdoc files
git rm -fr doc/
rm -fr doc/

# Build the gem
gem build --quiet *.gemspec

# Create checksum
sha512sum $gem_name*.gem > $gem_name.sha512.txt

# Create README
ruby-header-comments-to-rdoc lib/$gem_name.rb > README.rdoc
git add README.rdoc

# Create documentation
#rdoc --all  --quiet --template=$rdoc_template --line-numbers --title $gem_name --main lib/$basename.rb
#rdoc  --all --quiet --line-numbers --inline-source --title $gem_name --main lib/
yardoc lib/**/*.rb
chmod +r -R doc/
git add doc/*

# Commit
git commit -m "$msg" -a

#echo 'PUBLISH LOCAL...'  && gem-publish-to-local-host  && echo '...LOCAL DONE'
echo 'PUBLISH REMOTE...' && gem-publish-to-remote-host && echo '...REMOTE DONE'
echo 'PUBLISH GITHUB...' && gem-publish-to-github $msg && echo '...GITHUB DONE'

